/*--------------*- C++ -*----------- File generated by PyFoam ---------------*\ 
| =========                 |                                                 | 
| \      /  F ield          | OpenFOAM: The Open Source CFD Toolbox           | 
|  \    /   O peration      | Version:  v()                          | 
|   \  /    A nd            | Web:      www.OpenFOAM.com                      | 
|    \/     M anipulation   |                              (##############,   | 
|---------------------------                        /######################*  | 
|                                              ############################   | 
|                                         (###############################    | 
|                                     *########     #####################     | 
|                                  ##.                   ##############       | 
|        McLaren Racing Ltd                               ,##########         | 
|    McLaren Technology Centre,                            #######            | 
|    Chertsey Road, Woking, UK                            (#####              | 
|            GU21 4YH                                    .###                 | 
|                                                       ##                    | 
\*---------------------------------------------------------------------------*/ 
FoamFile
{
    version 2;
    format ascii;
    class dictionary;
    object "fvSchemes_2";
}

snGradSchemes
{
  default limited 0.333;
}

laplacianSchemes
{
  default Gauss linear limited 0.333;
}

fluxRequired
{
  default no;
  p ;
}

wallDist
{
  method meshWave;
}

gradSchemes
{
  default Gauss linear;
  grad(U) cellLimited<Venkatakrishnan> Gauss linear 1.0;
  grad(k) cellLimited Gauss linear 1;
  grad(omega) cellLimited Gauss linear 1;
  grad(p) Gauss linear;
}

divSchemes
{
  default Gauss linear;
  div((nuEff*dev2(T(grad(U))))) Gauss linear;
  div(div(phi,U)) Gauss linear;
  div(phi,U) bounded Gauss linearUpwindV grad(U);
  div(phi,k) bounded Gauss linearUpwind grad(k);
  div(phi,omega) bounded Gauss linearUpwind grad(omega);
}

ddtSchemes
{
  default backward;
}

interpolationSchemes
{
  default linear;
}

