/*--------------*- C++ -*----------- File generated by PyFoam ---------------*\ 
| =========                 |                                                 | 
| \      /  F ield          | OpenFOAM: The Open Source CFD Toolbox           | 
|  \    /   O peration      | Version:  v()                          | 
|   \  /    A nd            | Web:      www.OpenFOAM.com                      | 
|    \/     M anipulation   |                              (##############,   | 
|---------------------------                        /######################*  | 
|                                              ############################   | 
|                                         (###############################    | 
|                                     *########     #####################     | 
|                                  ##.                   ##############       | 
|        McLaren Racing Ltd                               ,##########         | 
|    McLaren Technology Centre,                            #######            | 
|    Chertsey Road, Woking, UK                            (#####              | 
|            GU21 4YH                                    .###                 | 
|                                                       ##                    | 
\*---------------------------------------------------------------------------*/ 
FoamFile
{
    version 2;
    format ascii;
    class dictionary;
    object "fvSolution_0";
}

potentialFlow
{
  nNonOrthogonalCorrectors 10;
  PhiRefCell      1;
  PhiRefValue     0;
}

SIMPLE
{
  consistent yes;
  nNonOrthogonalCorrectors 2;
}

relaxationFactors
{
  equations
  {
    U 0.9;
    UFinal 1.0;
    k 0.9;
    kFinal 1.0;
    omega 0.9;
    omegaFinal 1.0;
  }
  fields
  {
    p 0.3;
    pFinal 1.0;
  }
}

cache
{
  grad(U) yes;
}

solvers
{
  Phi
  {
    maxIter 30;
    relTol 0.0;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  U
  {
    maxIter 10;
    minIter 1;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  UFinal
  {
    maxIter 10;
    minIter 1;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  cellDisplacement
  {
    maxIter 10;
    relTol 0.1;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  epsilon
  {
    maxIter 10;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  epsilonFinal
  {
    maxIter 10;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  k
  {
    maxIter 10;
    minIter 1;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  kFinal
  {
    maxIter 10;
    minIter 1;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  omega
  {
    maxIter 10;
    minIter 1;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  omegaFinal
  {
    maxIter 10;
    minIter 1;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-07;
  }
  p
  {
    maxIter 20;
    minIter 1;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-04;
  }
  pFinal
  {
    maxIter 20;
    minIter 1;
    relTol 0.01;
    smoother GaussSeidel;
    solver GAMG;
    tolerance 1e-06;
  }
}

PIMPLE
{
  nCorrectors 2;
  nNonOrthogonalCorrectors 1;
  nOuterCorrectors 25;
  residualControl
  {
    U
    {
      relTol 0;
      tolerance 1e-05;
    }
    p
    {
      relTol 0;
      tolerance 0.0005;
    }
  }
}

PISO
{
  nCorrectors     2;
  nOuterCorrectors 2;
  nNonOrthogonalCorrectors 4;
  pRefCell        0;
  pRefValue       0;
}


